@model RamaExpress.Areas.Karyawan.Models.UjianViewModel
@{
    ViewData["Title"] = "Ujian Pelatihan";
}

<div class="container-fluid py-4">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 mb-1 text-warning">Ujian: @Model.Pelatihan.Judul</h1>
                    <p class="text-muted mb-0">
                        <span class="badge bg-warning text-dark me-2">@Model.Pelatihan.Kode</span>
                        @Model.TotalQuestions soal | Waktu: @Model.TimeLimitFormatted | Min. Skor: @Model.MinScore%
                    </p>
                </div>
                <div>
                    <div class="card bg-danger text-white">
                        <div class="card-body py-2 px-3">
                            <h4 class="mb-0" id="timer">@Model.TimeLimitFormatted</h4>
                            <small>Waktu Tersisa</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Exam Instructions -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="alert alert-warning">
                <h5 class="alert-heading">
                    <i class="bi bi-exclamation-triangle me-2"></i>Petunjuk Ujian
                </h5>
                <ul class="mb-0">
                    <li>Ujian terdiri dari <strong>@Model.TotalQuestions soal</strong> pilihan ganda</li>
                    <li>Waktu ujian: <strong>@Model.TimeLimitFormatted</strong></li>
                    <li>Skor minimal untuk lulus: <strong>@Model.MinScore%</strong></li>
                    <li>Pilih satu jawaban yang paling tepat untuk setiap soal</li>
                    <li>Ujian akan otomatis berakhir jika waktu habis</li>
                    <li><strong>Pastikan koneksi internet stabil selama ujian</strong></li>
                </ul>
            </div>
        </div>
    </div>

    <!-- Exam Form -->
    <form id="examForm">
        <div class="row">
            <!-- Questions -->
            <div class="col-lg-9">
                <div class="card shadow-sm">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-clipboard-check me-2"></i>Soal Ujian
                        </h5>
                    </div>
                    <div class="card-body">
                        @for (int i = 0; i < Model.Questions.Count; i++)
                        {
                            var question = Model.Questions[i];
                            <div class="question-item mb-4 p-3 border rounded" data-question="@(i + 1)">
                                <div class="d-flex justify-content-between align-items-start mb-3">
                                    <h6 class="fw-bold text-primary">
                                        Soal @(i + 1) dari @Model.TotalQuestions
                                    </h6>
                                    <span class="badge bg-primary">@question.Urutan</span>
                                </div>

                                <div class="question-text mb-3">
                                    <p class="fs-6 fw-semibold">@question.Pertanyaan</p>
                                </div>

                                <div class="options">
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="radio"
                                               name="answer_@question.Id" value="A" id="q@(question.Id)_a">
                                        <label class="form-check-label" for="q@(question.Id)_a">
                                            <strong>A.</strong> @question.OpsiA
                                        </label>
                                    </div>
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="radio"
                                               name="answer_@question.Id" value="B" id="q@(question.Id)_b">
                                        <label class="form-check-label" for="q@(question.Id)_b">
                                            <strong>B.</strong> @question.OpsiB
                                        </label>
                                    </div>
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="radio"
                                               name="answer_@question.Id" value="C" id="q@(question.Id)_c">
                                        <label class="form-check-label" for="q@(question.Id)_c">
                                            <strong>C.</strong> @question.OpsiC
                                        </label>
                                    </div>
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="radio"
                                               name="answer_@question.Id" value="D" id="q@(question.Id)_d">
                                        <label class="form-check-label" for="q@(question.Id)_d">
                                            <strong>D.</strong> @question.OpsiD
                                        </label>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="col-lg-3">
                <!-- Timer Card -->
                <div class="card shadow-sm mb-4 border-danger">
                    <div class="card-header bg-danger text-white">
                        <h6 class="mb-0">
                            <i class="bi bi-clock me-2"></i>Waktu Ujian
                        </h6>
                    </div>
                    <div class="card-body text-center">
                        <div class="timer-display mb-3">
                            <h2 class="text-danger mb-0" id="timerDisplay">@Model.TimeLimitFormatted</h2>
                            <small class="text-muted">Waktu Tersisa</small>
                        </div>
                        <div class="progress mb-3" style="height: 8px;">
                            <div class="progress-bar bg-danger" id="timeProgress" style="width: 100%"></div>
                        </div>
                        <small class="text-muted">Ujian akan otomatis berakhir jika waktu habis</small>
                    </div>
                </div>

                <!-- Question Navigator -->
                <div class="card shadow-sm mb-4">
                    <div class="card-header">
                        <h6 class="mb-0">
                            <i class="bi bi-list-ol me-2"></i>Navigasi Soal
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="question-navigator">
                            @for (int i = 1; i <= Model.TotalQuestions; i++)
                            {
                                <button type="button" class="btn btn-outline-primary btn-sm me-1 mb-1 question-nav-btn"
                                        data-question="@i">
                                    @i
                                </button>
                            }
                        </div>
                        <hr>
                        <div class="legend">
                            <small class="d-block mb-1">
                                <span class="badge bg-success me-1">•</span>Dijawab
                            </small>
                            <small class="d-block mb-1">
                                <span class="badge bg-primary me-1">•</span>Saat ini
                            </small>
                            <small class="d-block">
                                <span class="badge bg-secondary me-1">•</span>Belum dijawab
                            </small>
                        </div>
                    </div>
                </div>

                <!-- Exam Info -->
                <div class="card shadow-sm">
                    <div class="card-header">
                        <h6 class="mb-0">
                            <i class="bi bi-info-circle me-2"></i>Informasi Ujian
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="row text-center mb-3">
                            <div class="col-6">
                                <h5 class="text-primary mb-1">@Model.TotalQuestions</h5>
                                <small class="text-muted">Total Soal</small>
                            </div>
                            <div class="col-6">
                                <h5 class="text-success mb-1">@Model.MinScore%</h5>
                                <small class="text-muted">Skor Minimal</small>
                            </div>
                        </div>

                        <div class="progress-summary mb-3">
                            <div class="d-flex justify-content-between align-items-center mb-1">
                                <small class="text-muted">Progress</small>
                                <small class="text-muted"><span id="answeredCount">0</span>/@Model.TotalQuestions</small>
                            </div>
                            <div class="progress" style="height: 6px;">
                                <div class="progress-bar bg-success" id="answeredProgress" style="width: 0%"></div>
                            </div>
                        </div>

                        <button type="submit" class="btn btn-warning w-100" id="submitExam">
                            <i class="bi bi-send me-2"></i>Selesai Ujian
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

<style>
    .question-item {
        transition: all 0.3s ease;
    }

        .question-item.current {
            border-color: #0d6efd !important;
            box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
        }

    .form-check-input:checked {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }

    .form-check-label {
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 0.375rem;
        transition: background-color 0.15s ease-in-out;
    }

    .form-check:has(.form-check-input:checked) .form-check-label {
        background-color: rgba(13, 110, 253, 0.1);
    }

    .question-nav-btn {
        width: 40px;
        height: 40px;
    }

        .question-nav-btn.answered {
            background-color: #198754;
            border-color: #198754;
            color: white;
        }

        .question-nav-btn.current {
            background-color: #0d6efd;
            border-color: #0d6efd;
            color: white;
        }

    .timer-display h2 {
        font-family: 'Courier New', monospace;
        font-weight: bold;
    }

    .progress {
        background-color: rgba(0,0,0,0.1);
    }
</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const examForm = document.getElementById('examForm');
            const timerDisplay = document.getElementById('timerDisplay');
            const timeProgress = document.getElementById('timeProgress');
            const answeredProgress = document.getElementById('answeredProgress');
            const answeredCount = document.getElementById('answeredCount');
            const submitBtn = document.getElementById('submitExam');
            const questionNavBtns = document.querySelectorAll('.question-nav-btn');
            const questionItems = document.querySelectorAll('.question-item');

            let timeLimit = @Model.TimeLimit * 60; // Convert to seconds
            let timeRemaining = timeLimit;
            let examTimer;
            let currentQuestion = 1;

            // Initialize exam
            initializeExam();

            function initializeExam() {
                startTimer();
                updateQuestionNavigator();
                showQuestion(1);

                // Add event listeners
                document.querySelectorAll('input[type="radio"]').forEach(radio => {
                    radio.addEventListener('change', handleAnswerChange);
                });

                questionNavBtns.forEach(btn => {
                    btn.addEventListener('click', function() {
                        const questionNum = parseInt(this.dataset.question);
                        showQuestion(questionNum);
                    });
                });

                examForm.addEventListener('submit', handleSubmit);

                // Prevent accidental page refresh
                window.addEventListener('beforeunload', function(e) {
                    e.preventDefault();
                    e.returnValue = 'Ujian sedang berlangsung. Yakin ingin meninggalkan halaman?';
                });
            }

            function startTimer() {
                examTimer = setInterval(function() {
                    timeRemaining--;
                    updateTimerDisplay();
                    updateTimeProgress();

                    if (timeRemaining <= 0) {
                        clearInterval(examTimer);
                        autoSubmitExam();
                    }
                }, 1000);
            }

            function updateTimerDisplay() {
                const hours = Math.floor(timeRemaining / 3600);
                const minutes = Math.floor((timeRemaining % 3600) / 60);
                const seconds = timeRemaining % 60;

                let display = '';
                if (hours > 0) {
                    display = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                } else {
                    display = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                }

                timerDisplay.textContent = display;

                // Change color when time is running low
                if (timeRemaining <= 300) { // 5 minutes
                    timerDisplay.className = 'text-danger mb-0';
                } else if (timeRemaining <= 600) { // 10 minutes
                    timerDisplay.className = 'text-warning mb-0';
                }
            }

            function updateTimeProgress() {
                const percentage = (timeRemaining / timeLimit) * 100;
                timeProgress.style.width = percentage + '%';

                if (percentage <= 25) {
                    timeProgress.className = 'progress-bar bg-danger';
                } else if (percentage <= 50) {
                    timeProgress.className = 'progress-bar bg-warning';
                }
            }

            function handleAnswerChange() {
                updateQuestionNavigator();
                updateAnsweredProgress();
            }

            function updateQuestionNavigator() {
                questionNavBtns.forEach(btn => {
                    const questionNum = parseInt(btn.dataset.question);
                    const hasAnswer = checkQuestionAnswered(questionNum);

                    btn.classList.remove('answered', 'current');

                    if (hasAnswer) {
                        btn.classList.add('answered');
                    }

                    if (questionNum === currentQuestion) {
                        btn.classList.add('current');
                    }
                });
            }

            function checkQuestionAnswered(questionNum) {
                const questionItem = document.querySelector(`[data-question="${questionNum}"]`);
                if (questionItem) {
                    const radios = questionItem.querySelectorAll('input[type="radio"]');
                    return Array.from(radios).some(radio => radio.checked);
                }
                return false;
            }

            function updateAnsweredProgress() {
                const totalQuestions = @Model.TotalQuestions;
                let answered = 0;

                for (let i = 1; i <= totalQuestions; i++) {
                    if (checkQuestionAnswered(i)) {
                        answered++;
                    }
                }

                answeredCount.textContent = answered;
                const percentage = (answered / totalQuestions) * 100;
                answeredProgress.style.width = percentage + '%';

                // Enable submit button only if all questions are answered
                submitBtn.disabled = answered < totalQuestions;
            }

            function showQuestion(questionNum) {
                currentQuestion = questionNum;

                // Hide all questions
                questionItems.forEach(item => {
                    item.style.display = 'none';
                    item.classList.remove('current');
                });

                // Show current question
                const currentQuestionItem = document.querySelector(`[data-question="${questionNum}"]`);
                if (currentQuestionItem) {
                    currentQuestionItem.style.display = 'block';
                    currentQuestionItem.classList.add('current');
                    currentQuestionItem.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }

                updateQuestionNavigator();
            }

            function handleSubmit(e) {
                e.preventDefault();

                if (!confirm('Apakah Anda yakin ingin menyelesaikan ujian? Pastikan semua soal sudah dijawab.')) {
                    return;
                }

                submitExam();
            }

            function submitExam() {
                const formData = new FormData(examForm);
                const answers = {};

                // Collect answers
                for (let [key, value] of formData.entries()) {
                    if (key.startsWith('answer_')) {
                        const questionId = key.replace('answer_', '');
                        answers[questionId] = value;
                    }
                }

                // Show loading
                submitBtn.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>Menyimpan...';
                submitBtn.disabled = true;
                clearInterval(examTimer);

                // Submit to server
                fetch('@Url.Action("SubmitUjian", "Pelatihan", new { area = "Karyawan", id = Model.Pelatihan.Id })', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify(answers)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Remove beforeunload listener
                        window.removeEventListener('beforeunload', arguments.callee);

                        // Redirect to results
                        window.location.href = data.redirectUrl || '@Url.Action("HasilUjian", "Pelatihan", new { area = "Karyawan", id = Model.Pelatihan.Id })';
                    } else {
                        alert('Terjadi kesalahan: ' + (data.message || 'Gagal menyimpan jawaban'));
                        submitBtn.innerHTML = '<i class="bi bi-send me-2"></i>Selesai Ujian';
                        submitBtn.disabled = false;
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Terjadi kesalahan jaringan. Silakan coba lagi.');
                    submitBtn.innerHTML = '<i class="bi bi-send me-2"></i>Selesai Ujian';
                    submitBtn.disabled = false;
                });
            }

            function autoSubmitExam() {
                alert('Waktu ujian telah habis. Ujian akan otomatis diselesaikan.');
                submitExam();
            }

            // Initialize display
            updateAnsweredProgress();
        });
    </script>
}